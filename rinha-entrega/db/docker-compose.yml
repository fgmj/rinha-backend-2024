version: "3.5"

services:
   nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api01
      - api02
      - api03
    ports:
      # Obrigatório expor/usar a porta 9999 no load balancer!
      - "9999:9999"
    deploy:
      resources:
        limits:
          cpus: "0.1"
          memory: "60MB"
 
   db:
    image: postgres:14.2-alpine
#    restart: no
    hostname: db
    environment:
      - POSTGRES_PASSWORD=backend
      - POSTGRES_USER=rinha
      - POSTGRES_DB=rinha
    ports:
      - "5432:5432"
    volumes:
      - ./ddl.sql:/docker-entrypoint-initdb.d/script.sql
      - /var/lib/postgresql/data
    command: postgres -c checkpoint_timeout=600 -c max_wal_size=4096
    deploy:
      resources:
        limits:
          # Note que a soma de todos os limites dos serviços
          # aqui declarados é de 1.5 unidades de CPU e 550MB
          # de memória. A distribuição feita aqui é apenas
          # um exemplo – distribua como quiser.
          cpus: "0.5"
          memory: "190MB"
          
          
   api01: &api
    # Lembre-se de que seu serviço HTTP deve estar hospedado num repositório
    # publicamente acessível! Ex.: hub.docker.com
    image: rinha-spring-demo:latest
    hostname: api01
    environment:
      - DB_HOSTNAME=db
      - spring_profiles_active=production
      - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=15
#      - JAVA_TOOL_OPTIONS="-Xms20M -Xmx20M"
    ports:
      - "8081:8080"
    depends_on:
      - db
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "100MB"
      
   api02:
     <<: *api
     hostname: api02
     environment:
       - DB_HOSTNAME=db
       - spring_profiles_active=production
       - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=15
     ports:
       - "8082:8080"

   api03:
     <<: *api
     hostname: api03
     environment:
       - DB_HOSTNAME=db
       - spring_profiles_active=production
       - SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=15
     ports:
       - "8083:8080"

# O uso do modo `bridge` deve ser adequado à carga que será usada no teste.
# A edição anterior se beneficiou do modo host pois o volume de requisições
# era relativamente alto e a virtualização da rede se tornou um gargalo, mas
# este modo é mais complexo de ser configurado. Fique à vontade para usar o
# modo que quiser desde que não conflite com portas trivialmente usadas em um
# SO.
networks:
  default:
    driver: bridge
    name: rinha-nginx-2024q1


volumes:
  database_data:
    driver: local
